#!/bin/bash
# *******************************************************************
# * COPYRIGHT (c)      Ericsson AB, Sweden                          *
# *                   All rights reserved                           *
# *                                                                 *
# * The copyright to the computer program(s) herein is the property *
# * of Ericsson Radio Systems AB, Sweden.                           *
# * The programs may be used or copied only with the written        *
# * permission of Ericsson Radio Systems AB, Sweden.                *
# *                                                                 *
# *******************************************************************
#
# Name    : remove_hidden_files.bsh
# Date    : 23/02/2015
# Revision: C
# Purpose : This script will remove all the .nfsXXXX files under, 
#			1./eniq/mediator
# 
# Note : Later we can add as required.
# ********************************************************************
#
#   Command Section
#
# ********************************************************************
. /eniq/home/dcuser/.profile
if [ -z "${CONF_DIR}" ] ; then
  echo "ERROR: CONF_DIR is not set"
  exit 1
fi

if [ ! -r "${CONF_DIR}/niq.rc" ] ; then
  echo "ERROR: Source file is not readable at ${CONF_DIR}/niq.rc"
  exit 2
fi

. ${CONF_DIR}/niq.rc

if [ -z "${BIN_DIR}" ] ; then
  echo "ERROR: BIN_DIR is not set"
  exit 1
fi

if [ ! -r "${BIN_DIR}/common_variables.lib" ] ; then
  echo "ERROR: Source file is not readable at ${BIN_DIR}/common_variables.lib"
  exit 2
fi

. ${BIN_DIR}/common_variables.lib

# ********************************************************************
#
#       Configuration Section
#
# ********************************************************************
NOW=$(${DATE} +"%Y-%m-%d")
LOG_DIR=/eniq/log/sw_log
LOG_FILE=$LOG_DIR/engine/remove_hidden_files_$NOW.log

#$ECHO "`$DATE '+%Y_%m_%d_%H:%M:%S'` : $$ LogFile initialised" >> ${LOG_FILE}
##EQEV-103319. New Rack - manage_heap script calling dbisql resulting in high semaphore consumption
MAX_TIME=30
PIDFILE=/eniq/home/dcuser/.remove_hidden_filesPid
#$ECHO $$ >> ${LOG_FILE}
if [[ ! -e $PIDFILE ]]; then
    $TOUCH $PIDFILE
fi
if [ ! -f $PIDFILE ]
then
  #$ECHO $$ > ${LOG_FILE}
  #$ECHO "`$DATE '+%Y_%m_%d_%H:%M:%S'` : Previous instance is running" >> ${LOG_FILE}
  if [ $? -ne 0 ]
  then
    $ECHO "`$DATE '+%Y_%m_%d_%H:%M:%S'` : Failed to create PID file. remove_hidden_files script will not proceed." >> ${LOG_FILE}
    exit 1
  fi
else
  PID=`$CAT $PIDFILE`  
  for procid in $PID
  do
	 #$ECHO "`$DATE '+%Y_%m_%d_%H:%M:%S'` : $procid" >> ${LOG_FILE}
     $PS -p $procid > /dev/null
     if [ $? -eq 0 ]
     then
       psetime=`$PS -o etime= -p $procid|tr -d " "`
       if [ ! -z $psetime ]
       then
          #$ECHO "`$DATE '+%Y_%m_%d_%H:%M:%S'` : $psetime and $procid" >> ${LOG_FILE}
          psmin=$($ECHO $psetime|awk -F":" '{print $1}')
          psminint=$(($psmin+0))
          if [ $psminint -ge $MAX_TIME ]
          then
             $ECHO "`$DATE '+%Y_%m_%d_%H:%M:%S'` : Previous process is already running with PID $procid for more than $MAX_TIME minutes. Killing the previous process with PID $procid" >> ${LOG_FILE}
             $KILL -9 $procid > /dev/null
             $ECHO "$($GREP -v $procid $PIDFILE)" > $PIDFILE
	      else
		     $ECHO "`$DATE '+%Y_%m_%d_%H:%M:%S'` : Previous process is already running with PID $procid for less than $MAX_TIME minutes. Exiting the current instance with PID $$" >> ${LOG_FILE}
             $ECHO "$($GREP -v $$ $PIDFILE)" > $PIDFILE
			 exit 1
          fi
       fi
     else
        $ECHO "$($GREP -v $procid $PIDFILE)" > $PIDFILE
        perl -i -n -e "print if /\S/" $PIDFILE
     fi
  done
  $ECHO $$ >> $PIDFILE
  if [ $? -ne 0 ]
  then
    $ECHO "`$DATE '+%Y_%m_%d_%H:%M:%S'` : Could not create PID file" >> ${LOG_FILE}
    exit 1
  fi
fi


### Function: _echo ###
#
# Write the log into LOG_FILE
#
# Arguments:
#       $1 - Content write in the file.
# Return Values:
#       none
_echo(){
 	$ECHO "$1" >> $LOG_FILE
}

### Function: remove_hidden ###
#
# Remove the hidden files by getting process ID.
#
# Arguments:
#       $1 - File Name to delete
# Return Values:
#       none
remove_hidden(){
local _hidden_file_=$1
if [ -d $_hidden_file_ ]; then
	TIMENOW=$(${DATE} +"%T")
	_echo "$TIMENOW : $_hidden_file_ is a directory"
	$RM -rf $_hidden_file_ > /dev/null 2>&1
else
	PID=`$LSOF $_hidden_file_ | $GREP $_hidden_file_ | $GREP -v "grep" | $NAWK -F" " '{print $2}' | $TAIL -1`
	if [ -z $PID ]; then
		TIMENOW=$(${DATE} +"%T")
		_echo "$TIMENOW : No process associated with $_hidden_file_ file."
		$RM -f $_hidden_file_ > /dev/null 2>&1
	else
		TIMENOW=$(${DATE} +"%T")
		_echo "$TIMENOW : One process associated with $_hidden_file_ and PID is $PID"
		$KILL -9 $PID
		if [ -f $_hidden_file_ ]; then
			TIMENOW=$(${DATE} +"%T")
			_echo "$TIMENOW : Removing $_hidden_file_"
			$RM -f $_hidden_file_ > /dev/null 2>&1
		fi
	fi
fi
}

# ********************************************************************
#
#   Main body of program
#
# ********************************************************************

#Creating a list of directory to check
if [ ! -f /tmp/dir_list.txt ]; then
	$TOUCH /tmp/dir_list.txt 
fi

if [ $1 ]; then
	$ECHO $1 > /tmp/dir_list.txt
else
	$ECHO "/eniq/data/pmdata_soem" >> /tmp/dir_list.txt
fi

# For each directory, get all the hidden files
while read _is_hidden_
do
	if [ -d $_is_hidden_ ]; then
		$FIND $_is_hidden_ -name '.nfs*' >> /tmp/hidden.txt
	fi
done < /tmp/dir_list.txt

# Remove all the hidden files from above directories

if [ -f /tmp/hidden.txt ]; then
while read first_line
do
	remove_hidden $first_line
done < "/tmp/hidden.txt"
$RM -f /tmp/hidden.txt > /dev/null 2>&1
fi

# Cleanup
$RM -f /tmp/dir_list.txt > /dev/null 2>&1

TIMENOW=$(${DATE} +"%T")
_echo "$TIMENOW : Deletion completed."	

exit 0
