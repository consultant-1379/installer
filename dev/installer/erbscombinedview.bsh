#!/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
# (c) Ericsson Radio Systems AB 2018 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : erbscombinedview.bsh
# Purpose : Script to drop the existing G1 ERBS view and recreate them 
#           as a combined view on G1 and G2 partitions.
# Usage   : bash erbscombinedview.bsh
# Date    : 15/07/2020(dummy date) Last modified 10/05/2023
#
# ********************************************************************
#
# Command Section
#
# ********************************************************************

AWK=/usr/bin/awk
CAT=/usr/bin/cat
CHMOD=/usr/bin/chmod
CHOWN=/usr/bin/chown
CP=/usr/bin/cp
CUT=/usr/bin/cut
DATE=/usr/bin/date
ECHO=/usr/bin/echo
EGREP=/usr/bin/egrep
FIND=/usr/bin/find
GEGREP=/usr/sfw/bin/gegrep
GREP=/usr/bin/grep
LS=/usr/bin/ls
MKDIR=/usr/bin/mkdir
NAWK=/usr/bin/nawk
RM=/usr/bin/rm
SED=/usr/bin/sed
SU=/usr/bin/su
TOUCH=/usr/bin/touch
UNZIP=/usr/bin/unzip

# ********************************************************************
#
# Configuration 
#
# ********************************************************************
STARTTIMESTAMP=`$DATE '+%y%m%d_%H%M%S'`
LOGPATH=/eniq/log/sw_log/tp_installer
INSTALLER_DIR=/eniq/sw/installer
LOGFILE=${LOGPATH}/erbs_combined_view_create_${STARTTIMESTAMP}.log
ERBSVIEWSQL=${INSTALLER_DIR}/erbs_view_sql
ERBSDCPUBLICVIEWSQL=${INSTALLER_DIR}/erbs_dcpublic_view_sql
TMP=${INSTALLER_DIR}/temp_erbs_view

CONF_DIR=/eniq/sw/conf

if [ -s /eniq/admin/lib/common_functions.lib ]; then
	. /eniq/admin/lib/common_functions.lib
else
	$ECHO "Could not find /eniq/admin/lib/common_functions.lib"
	exit 1
fi

. /eniq/sybase_iq/IQ-*/IQ-*.sh
sybase_env_variables_ec=$?
if [ $sybase_env_variables_ec -ne 0 ]; then
    $ECHO "Unable to find Sybase environment variables"
fi

DBISQL=$(which dbisql)

########################################################################
# Function: remove_connection_string_file
# Displays the usage message
#
# Arguments: None
#
# Return Values: None
remove_connection_string_file() {
	if [ -f $dc_connection_string ]; then 
		$RM -rf $dc_connection_string
		if [ $? != 0 ]; then
		  $ECHO "Unable to delete " $dc_connection_string | $TEE -a ${LOGFILE}
		fi
	fi
	
	if [ -f $dc_connection_string_noexit ]; then 
		$RM -rf $dc_connection_string_noexit
		if [ $? != 0 ]; then
		  $ECHO "Unable to delete " $dc_connection_string_noexit | $TEE -a ${LOGFILE}
		fi
	fi
	
	if [ -f $dba_connection_string ]; then 
		$RM -rf $dba_connection_string
		if [ $? != 0 ]; then
		  $ECHO "Unable to delete " $dba_connection_string | $TEE -a ${LOGFILE}
		fi
	fi
	
	if [ -f $dwhrep_connection_string ]; then 
		$RM -rf $dwhrep_connection_string
		if [ $? != 0 ]; then
		  $ECHO "Unable to delete " $dwhrep_connection_string | $TEE -a ${LOGFILE}
		fi
	fi
}

trap remove_connection_string_file EXIT

DWHDBPASSWORD=`inigetpassword DWH -v DCPassword -f ${CONF_DIR}/niq.ini`
DWHDB_PORT=`inigetpassword DWH -v PortNumber -f ${CONF_DIR}/niq.ini`
DWH_SERVER_NAME=`inigetpassword DWH -v ServerName -f ${CONF_DIR}/niq.ini`
DWHREPUSER=`inigetpassword REP -v DWHREPUsername -f ${CONF_DIR}/niq.ini`
DWHREPPASSWORD=`inigetpassword REP -v DWHREPPassword -f ${CONF_DIR}/niq.ini`
REP_PORT=`inigetpassword REP -v PortNumber -f ${CONF_DIR}/niq.ini`
REP_SERVER_NAME=`inigetpassword REP -v ServerName -f ${CONF_DIR}/niq.ini`
DBAPASSWORD=`inigetpassword DB -v DBAPassword -f ${CONF_DIR}/niq.ini`

dc_connection_string_decrypt="-nogui -onerror exit -c \"eng=${DWH_SERVER_NAME};links=tcpip{host=${DWH_SERVER_NAME};port=${DWHDB_PORT}};uid=dc;pwd=${DWHDBPASSWORD}\""
dc_connection_string_decrypt_noexit="-nogui -c \"eng=${DWH_SERVER_NAME};links=tcpip{host=${DWH_SERVER_NAME};port=${DWHDB_PORT}};uid=dc;pwd=${DWHDBPASSWORD}\""
dba_connection_string_decrypt="-nogui -onerror exit -c \"eng=${DWH_SERVER_NAME};links=tcpip{host=${DWH_SERVER_NAME};port=${DWHDB_PORT}};uid=dba;pwd=${DBAPASSWORD}\""
dwhrep_connection_string_decrypt="-nogui -c \"eng=${REP_SERVER_NAME};links=tcpip{host=${REP_SERVER_NAME};port=${REP_PORT}};uid=$DWHREPUSER;pwd=$DWHREPPASSWORD\""

dc_connection_string=/var/tmp/dc_encrypt_$$.file
dc_connection_string_noexit=/var/tmp/dc_noexit_encrypt_$$.file
dba_connection_string=/var/tmp/dba_encrypt_$$.file
dwhrep_connection_string=/var/tmp/dwhrep_encrypt_$$.file

if [ ! -x "$DBISQL" ]; then
	_err_msg_="$DBISQL commands not found or not executable."
	abort_script "$_err_msg_"
fi

type get_encrypt_file &>/dev/null && isPresent='true' || isPresent='false'
if [ ${isPresent} == 'true' ]; then
  get_encrypt_file "${dc_connection_string_decrypt}" "${dc_connection_string}"
  get_encrypt_file "${dc_connection_string_decrypt_noexit}" "${dc_connection_string_noexit}"
  get_encrypt_file "${dba_connection_string_decrypt}" "${dba_connection_string}"
  get_encrypt_file "${dwhrep_connection_string_decrypt}" "${dwhrep_connection_string}"
  
  DBISQL_DC="${DBISQL} @${dc_connection_string}"
  DBISQL_DC_NOEXIT="${DBISQL} @${dc_connection_string_noexit}"
  DBISQL_DBA="${DBISQL} @${dba_connection_string}"
  DBISQL_DWHREP="${DBISQL} @${dwhrep_connection_string}"
else
  DBISQL_DC="${DBISQL} ${dc_connection_string_decrypt}"
  DBISQL_DC_NOEXIT="${DBISQL} ${dc_connection_string_decrypt_noexit}"
  DBISQL_DBA="${DBISQL} ${dba_connection_string_decrypt}"
  DBISQL_DWHREP="${DBISQL} ${dwhrep_connection_string_decrypt}"
fi

$ECHO "Execution started at " $STARTTIMESTAMP >> ${LOGFILE}

if [ ! -d ${LOGPATH} ] ; then
	$MKDIR -p ${LOGPATH}
	$CHMOD 777 ${LOGPATH}
fi

if [ ! -d ${ERBSVIEWSQL} ] ; then
	$MKDIR -p ${ERBSVIEWSQL}
else
	$RM -rf ${ERBSVIEWSQL}
	$MKDIR -p ${ERBSVIEWSQL}
	$CHMOD 777 ${ERBSVIEWSQL}
fi 

if [ ! -d ${ERBSDCPUBLICVIEWSQL} ] ; then
	$MKDIR -p ${ERBSDCPUBLICVIEWSQL}
else
	$RM -rf ${ERBSDCPUBLICVIEWSQL}
	$MKDIR -p ${ERBSDCPUBLICVIEWSQL}
	$CHMOD 777 ${ERBSDCPUBLICVIEWSQL}
fi 

if [ ! -d ${TMP} ] ; then
	$MKDIR -p ${TMP}
	$CHMOD 777 ${TMP}
else
	$RM -rf ${TMP}
	$MKDIR -p ${TMP}
	$CHMOD 777 ${TMP}
fi 

if [[ "$1" == "-a" ]];then
	activeRestore="Y";
fi

# ********************************************************************
#
# Functions
#
# ********************************************************************

##### Function: abort_script 
#
#   This will is called if the script is aborted thru an error
#   error signal sent by the kernel such as CTRL-C or if a serious
#   error is encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program (Not always used)
# Return Values:
#       none
abort_script() {
if [ "$1" ]; then
	_err_msg_=$1
else
	_err_msg_="Script aborted.......\n"
fi

if [ "${LOGFILE}" ]; then
	$ECHO "\n$_err_msg_\n"| $TEE -a ${LOGFILE}
else
	$ECHO "\n$_err_msg_\n"
fi
}

##### Function: removeView 
#
#   This will is called to remove a particular user view
#
# Arguments:
#       $1 - Viewname to be removed
#		$2 - User where view belongs to
# Return Values:
#       0 - Success
#		1 - Failure
removeView() {
viewname=$1
user=$2

${DBISQL_DBA} "call dba.forceDropView('$viewname', '$user')"
if [[ $? -eq 0 ]]; then
	$ECHO "$($DATE '+%Y_%m_%d_%H:%M:%S') : Dropped existing $user views : $viewname" | $TEE -a ${log}
	return 0
else
	$ECHO "$($DATE '+%Y_%m_%d_%H:%M:%S') : Failed to drop the view $user.$viewname. Trying again. " | $TEE -a ${log}
	return 1
fi
}

##### Function: createDcpView 
#
#   This will Create DCPUBLIC View
#
# Arguments:
#       $1 - Viewname to create 
# Return Values:
#       none
createDcpView() {
dcpViewname=$1

${DBISQL_DBA} ${ERBSDCPUBLICVIEWSQL}/${dcpViewname}_dcpublic.sql
if [[ $? -eq 0 ]]; then
	$ECHO "$($DATE '+%Y_%m_%d_%H:%M:%S') : View dcpublic.$dcpViewname created" | $TEE -a ${log}
	${DBISQL_DBA} "grant select on dcpublic.$dcpViewname to dcpublic"
	$ECHO "$($DATE '+%Y_%m_%d_%H:%M:%S') : SELECT permission granted for dcpublic user on view dcpublic.$dcpViewname" | $TEE -a ${log}
else
	$ECHO "$($DATE '+%Y_%m_%d_%H:%M:%S') : View dcpublic.$dcpViewname creation failed" | $TEE -a ${log}
fi
}

##### Function: createDcView 
#
#   This will Create DC View
#
# Arguments:
#       $1 - Viewname to create 
# Return Values:
#       none
createDcView() {
viewSQL=$1
dcViewname=$2

${DBISQL_DC} $viewSQL
if [[ $? -eq 0 ]]; then
	$ECHO "$($DATE '+%Y_%m_%d_%H:%M:%S') : View dc.$dcViewname created" | $TEE -a ${log}
	${DBISQL_DBA} "grant select on dc.$dcViewname to dcbo"
	${DBISQL_DBA} "grant select on dc.$dcViewname to dc"
	$ECHO "$($DATE '+%Y_%m_%d_%H:%M:%S') : SELECT permission granted for dc user on view dc.$dcViewname" | $TEE -a ${log}
	$ECHO "$($DATE '+%Y_%m_%d_%H:%M:%S') : SELECT permission granted for dcbo user on view dc.$dcViewname" | $TEE -a ${log}
else
	$ECHO "$($DATE '+%Y_%m_%d_%H:%M:%S') : View dc.$dcViewname creation failed " | $TEE -a ${log}
fi
}

##### Function: dropRecreate (Sub-processes)
#
#   This will Drop the existing view and recreate them
#
# Arguments:
#       $1 - List of views 
#		$2 - Log file 
# Return Values:
#       none
dropRecreate() {
viewList=$1
log=$2

while IFS= read var
do
	sql='/eniq/sw/installer/erbs_view_sql/'$var
	view_tmp=`$ECHO "$sql" | $CUT -d. -f1`
	view=`$ECHO "$view_tmp" | $CUT -d/ -f6`
	$ECHO "\n----------------------------- $view ------------------------------------" |$TEE -a ${log}

	# Check if DC view is existing and drop the view via dba.forceDropView stored procedure
	dcCount=0
	while [ $dcCount -lt 3 ] ; do
		removeView $view dc
		if [ $? == 0 ]; then
			# Create DC view
			createDcView $sql $view
			dcCreateView="false"
			break
		else
			dcCreateView="true"
		fi
		dcCount=$((dcCount+1))
	done
	
	if [ $dcCreateView == "true" ]; then
		# lock DB user
		${INSTALLER_DIR}/change_db_users_perm.bsh -a lock -u ALL -l ${log}
		
		# Remove DC view
		removeView $view dc
		
		# unlock DB user
		${INSTALLER_DIR}/change_db_users_perm.bsh -a unlock -u ALL -l ${log} 2>&1
		if [ $? -ne 0 ] ; then
			$ECHO "$($DATE '+%Y_%m_%d_%H:%M:%S') : Failed to unlock database users.." | $TEE -a ${log}
		fi
		
		# Create DC view
		createDcView $sql $view
	fi
	
	# Check if DCPUBLIC view is existing and drop the view via dba.forceDropView stored procedure
	if [[ $view != "DIM_E_LTE_LLE_EUCELL" ]] && [[ $view != "DIM_E_LTE_LLE_ERBS" ]]; then 
		${DBISQL_DBA} "execute dc.generate_combined_view_dcpublic $view;OUTPUT TO ${TMP}/temp_erbs_view_def_dcpublic_$view.txt" HEXADECIMAL ASIS FORMAT TEXT ;
		$SED 's/.//;s/.$//' ${TMP}/temp_erbs_view_def_dcpublic_$view.txt > ${ERBSDCPUBLICVIEWSQL}/${view}_dcpublic.sql
		$ECHO "where ROWSTATUS <> 'DUPLICATE' and ROWSTATUS <> 'SUSPECTED'" >> ${ERBSDCPUBLICVIEWSQL}/${view}_dcpublic.sql

		dcpCount=0
		while [ $dcpCount -lt 3 ] ; do
			removeView $view dcpublic
			if [ $? == 0 ]; then
				# Create DCPUBLIC view
				createDcpView $view
				dcpCreateView="false"
				break
			else
				dcpCreateView="true"
			fi
			dcpCount=$((dcCount+1))
		done
		
		if [ $dcpCreateView == "true" ]; then
			# lock DB user
			${INSTALLER_DIR}/change_db_users_perm.bsh -a lock -u ALL -l ${log}
			
			# Remove DCPUBLIC view
			removeView $view dcpublic
			
			# unlock DB user
			${INSTALLER_DIR}/change_db_users_perm.bsh -a unlock -u ALL -l ${log} 2>&1
			if [ $? -ne 0 ] ; then
				$ECHO "$($DATE '+%Y_%m_%d_%H:%M:%S') : Failed to unlock database users.." | $TEE -a ${log}
			fi
			
			# Create DCPUBLIC view
			createDcpView $view
		fi
	fi
done < $viewList
}

# ********************************************************************
#
# Main Program
#
# ********************************************************************

#Checking if both the techpack are installed
$ECHO "$($DATE '+%Y_%m_%d_%H:%M:%S') : Checking if both the techpack are installed." >> ${LOGFILE}
${DBISQL_DWHREP} "select DISTINCT TECHPACK_NAME from Versioning WHERE TECHPACK_NAME like 'DC_E_ERBS%';OUTPUT TO $TMP/tmp.txt"

x=$($EGREP -c 'DC_E_ERBS' $TMP/tmp.txt)

if [[ $x -eq 2 ]]; then
	flag=1
else 
	flag=0
fi

if [[ $flag -eq 1 ]]; then
	## Create stored procedure by connecting to dwhrep
	$ECHO "$($DATE '+%Y_%m_%d_%H:%M:%S') : Connecting to dwhrep database to create the stored procedure" >> ${LOGFILE}

	## Drop and create the stored procedure
	${DBISQL_DWHREP} ${INSTALLER_DIR}/generate_erbs_combined_view.sql

	## Execute the generic stored procedure for dcpublic view creation
	${DBISQL_DC_NOEXIT} ${INSTALLER_DIR}/dcpublic_erbs.sql
	
	## Get the list of table names
	if [[ "${activeRestore}" == "Y" ]]; then
		$ECHO "$($DATE '+%Y_%m_%d_%H:%M:%S') : Fetching the limited view names for DC_E_ERBSG2 Techpack" >> ${LOGFILE}
		${DBISQL_DWHREP} "select DISTINCT STORAGEID from DWHColumn WHERE STORAGEID like '%DC_E_ERBSG2%' and STORAGEID in (select distinct STORAGEID from DWHTYPE where tablelevel in ('raw','plain'));OUTPUT TO $TMP/input.txt"
	else
		$ECHO "$($DATE '+%Y_%m_%d_%H:%M:%S') : Fetching the view names for DC_E_ERBSG2 Techpack" >> ${LOGFILE}
		${DBISQL_DWHREP} "select DISTINCT STORAGEID from DWHColumn WHERE STORAGEID like '%DC_E_ERBSG2%';OUTPUT TO $TMP/input.txt"
	fi
	$ECHO "-------------------------------------------------------------" >> ${LOGFILE}
	
	#########Read the .txt file
	while IFS= read var
	do
		f1=$var
		f2="${var/G2_/_}"

		########hardcoding for the REP and REPORT views 
		if [[ $f2 == *"DC_E_ERBS_PMULINTERFERENCEREPORT:"* ]]; then
			f2="${f2/REPORT:/REP:}"
			$ECHO "Modifing the DC_E_ERBS_PMULINTERFERENCEREPORT name to $f2" >> ${LOGFILE}
		fi

		viewname="${f2/:/_}"
		filename_tmp="$ERBSVIEWSQL/$viewname.sql"
		filename="${filename_tmp//\'}"
		view=${viewname//\'}

		$ECHO "$($DATE '+%Y_%m_%d_%H:%M:%S') : Creating combined view for $f1 and $f2" >> ${LOGFILE}
		${DBISQL_DWHREP} "execute generate_erbs_combined_view $f2, $f1, $viewname;OUTPUT TO $TMP/temp_erbs_view_def.txt" HEXADECIMAL ASIS FORMAT TEXT ;
		$SED 's/.//;s/.$//' $TMP/temp_erbs_view_def.txt > $filename
		$ECHO "$($DATE '+%Y_%m_%d_%H:%M:%S') : View definition at $filename \n" >> ${LOGFILE}
	done < $TMP/input.txt

	$LS ${ERBSVIEWSQL} > ${TMP}/CheckCount.txt
	
	count=`$CAT ${TMP}/CheckCount.txt | wc -l`
	count=${count// /}
	count_half=$((count/2))
	count_half=${count_half// /}

	$SED -n 1,${count_half}p ${TMP}/CheckCount.txt >> ${TMP}/thread1.txt
	$SED -n `expr $((count_half+1))`,${count}p ${TMP}/CheckCount.txt >> ${TMP}/thread2.txt

	dropRecreate ${TMP}/thread1.txt  ${TMP}/Thread1Log.txt &
	dropRecreate ${TMP}/thread2.txt  ${TMP}/Thread2Log.txt &

	## wait for all the threads to complete its execution
	wait
	
	$CAT ${TMP}/Thread1Log.txt ${TMP}/Thread2Log.txt >> ${LOGFILE}
	
	## Check the invalid views.. Recompile and enable them	
	${DBISQL_DBA} "select U.user_name + '.' + T.table_name from sysobject O, systab T, sysuser U where T.object_id = O.object_id and T.table_name like '%[_]PP%' and U.user_id = T.creatoR and O.status = 2 and O.object_type = 2;OUTPUT TO ${TMP}/invalidViews_tmp.txt"
	$SED s/\'//g ${TMP}/invalidViews_tmp.txt > ${TMP}/invalidViews.txt	
	while IFS= read var
	do
		$ECHO "$($DATE '+%Y_%m_%d_%H:%M:%S') : Recompiling and Enabling the view $var" | $TEE -a ${LOGFILE}
		${DBISQL_DBA}  "alter view $var recompile"
		${DBISQL_DBA}  "alter view $var enable"
	done < ${TMP}/invalidViews.txt
else
	$ECHO "$($DATE '+%Y_%m_%d_%H:%M:%S') : Either DC_E_ERBS or DC_E_ERBSG2 or both Techpack(s) is/are not installed. So skipping creation of combined views..." >> ${LOGFILE}
fi
	
ENDTIMESTAMP=`$DATE '+%y%m%d_%H%M%S'`
$ECHO "Execution ended at " $ENDTIMESTAMP >> ${LOGFILE}

### Delete all the temporary files created so far
$RM -rf ${TMP}  
