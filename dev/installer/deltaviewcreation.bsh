#!/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
# (c) Ericsson Radio Systems AB 2019 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : deltaviewcreation.bsh
# Date    : 05/02/2019
# Purpose : Script to drop the existing Delta views and recreate them
#
# Usage   : deltaviewcreation.bsh
#
# ********************************************************************
#
# Command Section
#
# ********************************************************************

 . /eniq/home/dcuser/.profile

if [ ! -r "${BIN_DIR}/common_variables.lib" ] ; then
  echo "ERROR: Source file is not readable at ${BIN_DIR}/common_variables.lib"
  exit 3
fi

. ${BIN_DIR}/common_variables.lib

STARTTIMESTAMP=`$DATE '+%y%m%d_%H%M%S'`
TODAY=`$DATE +'%Y%m%d'`

SYBASE=/eniq/sybase_iq
export SYBASE

SQLANY=/eniq/sql_anywhere
export SQLANY
. ${SYBASE}/IQ.sh

LOGPATH=/eniq/log/sw_log/engine
export LOGPATH

INSTALLER_DIR=/eniq/sw/installer
export INSTALLER_DIR

LOGFILE=${LOGPATH}/delta_view_create_${STARTTIMESTAMP}.log
export LOGFILE

FAILEDVIEWSLOG=${LOGPATH}/failed_delta_views_${STARTTIMESTAMP}.log
export FAILEDVIEWSLOG

VIEWDEFSBCKUP=${LOGPATH}/delta_view_defs_backup
export VIEWDEFSBCKUP

DELTAVIEWSQL=${INSTALLER_DIR}/delta_view_sqls
export DELTAVIEWSQL

TMP=${INSTALLER_DIR}/temp_delta

export TMP

CONF_DIR=/eniq/sw/conf
if [ -z "$CONF_DIR" ] ; then
  $ECHO "ERROR: CONF_DIR is not set"
  exit 1
fi

if [ -s /eniq/admin/lib/common_functions.lib ]; then
    . /eniq/admin/lib/common_functions.lib
else
        $ECHO "Could not find /eniq/admin/lib/common_functions.lib"
        exit 1
fi

########################################################################
# Function: remove_connection_string
# Removes/Deletes connection string once the script terminates
#
# Arguments: None
#
# Return Values: None
remove_connection_string()
{
if [ -f $connection_string_dc ]; then
  $RM -f $connection_string_dc
  if [ $? != 0 ]; then
    $ECHO "Unable to delete $connection_string_dc"
  fi
fi

if [ -f $connection_string_dba ]; then
  $RM -f $connection_string_dba
  if [ $? != 0 ]; then
    $ECHO "Unable to delete $connection_string_dba"
  fi
fi

if [ -f $connection_string_dwhrep ]; then
  $RM -f $connection_string_dwhrep
  if [ $? != 0 ]; then
    $ECHO "Unable to delete $connection_string_dwhrep"
  fi
fi

if [ -f $connection_string_etlrep ]; then
  $RM -f $connection_string_etlrep
  if [ $? != 0 ]; then
    $ECHO "Unable to delete $connection_string_etlrep"
  fi
fi

}

trap remove_connection_string EXIT

DWHDBPASSWORD=`inigetpassword DWH -v DCPassword -f ${CONF_DIR}/niq.ini`
DWHDB_PORT=`inigetpassword DWH -v PortNumber -f ${CONF_DIR}/niq.ini`
DWH_SERVER_NAME=`inigetpassword DWH -v ServerName -f ${CONF_DIR}/niq.ini`
DWHREPUSER=`inigetpassword REP -v DWHREPUsername -f ${CONF_DIR}/niq.ini`
DWHREPPASSWORD=`inigetpassword REP -v DWHREPPassword -f ${CONF_DIR}/niq.ini`
ETLREPUSER=`inigetpassword REP -v ETLREPUsername -f ${CONF_DIR}/niq.ini`
ETLREPPASSWORD=`inigetpassword REP -v ETLREPPassword -f ${CONF_DIR}/niq.ini`
REP_PORT=`inigetpassword REP -v PortNumber -f ${CONF_DIR}/niq.ini`
REP_SERVER_NAME=`inigetpassword REP -v ServerName -f ${CONF_DIR}/niq.ini`
DBAPASSWORD=`inigetpassword DB -v DBAPassword -f ${CONF_DIR}/niq.ini`

connection_string_dc=/var/tmp/encrypt_$$.txt
connection_string_dba=/var/tmp/encrypt2_$$.txt
connection_string_dwhrep=/var/tmp/encrypt3_$$.txt
connection_string_etlrep=/var/tmp/encrypt4_$$.txt
connection_string_decrypt_dc="-onerror exit -nogui -c \"eng=${DWH_SERVER_NAME};links=tcpip{host=${DWH_SERVER_NAME};port=${DWHDB_PORT}};uid=dc;pwd=${DWHDBPASSWORD}\""
connection_string_decrypt_dba="-nogui -c \"eng=dwhdb;links=tcpip{host=dwhdb;port=2640};uid=dba;pwd=${DBAPASSWORD}\""
connection_string_decrypt_dwhrep="-nogui -c \"eng=${REP_SERVER_NAME};links=tcpip{host=${REP_SERVER_NAME};port=${REP_PORT}};uid=$DWHREPUSER;pwd=$DWHREPPASSWORD\""
connection_string_decrypt_etlrep="-nogui -c \"eng=${REP_SERVER_NAME};links=tcpip{host=${REP_SERVER_NAME};port=${REP_PORT}};uid=$ETLREPUSER;pwd=$ETLREPPASSWORD\""

. /eniq/sybase_iq/IQ-*/IQ-*.sh
 
sybase_env_variables_ec=$?
if [ $sybase_env_variables_ec -ne 0 ]; then
     $ECHO "Unable to find sybase env variables"
fi

DBISQL=$(which dbisql)

if [ ! -x "$DBISQL" ]; then
    _err_msg_="$DBISQL commands not found or not executable."
    abort_script "$_err_msg_"
fi

type get_encrypt_file &>/dev/null && isPresent='true' || isPresent='false'
if [ ${isPresent} == 'true' ]; then
  get_encrypt_file "${connection_string_decrypt_dc}" "${connection_string_dc}"
  get_encrypt_file "${connection_string_decrypt_dba}" "${connection_string_dba}"
  get_encrypt_file "${connection_string_decrypt_dwhrep}" "${connection_string_dwhrep}"
  get_encrypt_file "${connection_string_decrypt_etlrep}" "${connection_string_etlrep}"
  
  DBISQL_DC="${DBISQL} @${connection_string_dc}"
  DBISQL_DBA="${DBISQL} @${connection_string_dba}"
  DBISQL_DWHREP="${DBISQL} @${connection_string_dwhrep}"
  DBISQL_ETLREP="${DBISQL} @${connection_string_etlrep}"
else
  DBISQL_DC="${DBISQL} ${connection_string_decrypt_dc}"
  DBISQL_DBA="${DBISQL} ${connection_string_decrypt_dba}"
  DBISQL_DWHREP="${DBISQL} ${connection_string_decrypt_dwhrep}"
  DBISQL_ETLREP="${DBISQL} ${connection_string_decrypt_etlrep}"
fi

$ECHO "Execution started at " $STARTTIMESTAMP >> ${LOGFILE}

EchoDateText() {
   $ECHO `$DATE '+%Y-%m-%d %H:%M:%S' ` $2 ":"  $3 | $TEE -a $1
}

runInParallel()
{

$ECHO "$1"
#Modifying the view definition for all the delta views
while IFS= read line
do
        $ECHO "-------------------------------------$line----------------------------------------------------"
        #Removing the single quotes in the string
        viewname=${line//\'}
        if [[ "$viewname" == "DC_E_TSS_TGC_GATEWAY_DELTA_1" ]] || [[ "$viewname" == "DC_E_TSS_TGC_GATEWAY_DELTA_2" ]];  then
                tview_tmp=${viewname%??}
                tableview=${tview_tmp/_DELTA/_RAW}
                get_partition_table $viewname $tableview $2
        else
                tablename=${viewname/_DELTA/_RAW}
                get_partition_table $viewname $tablename $2
        fi

        if [[ $? -eq 1 ]]; then
                drop_view $viewname $retryFailure $2
        else
                $ECHO "Skipping Recreation.."
        fi

done < $1

}

usage()
{
   $ECHO "Usage: deltaviewcreation -d | -r <Name of the Delta View>"
   $ECHO "-d            To Drop and recreate the view passed as argument 2"
   $ECHO "-r            To Only recreate the view passed as argument 2"
}
recreate_view()
{
# Arguments
# $1 Path of the file that has the definition of the view to be created
# $2 Flag that enables writing to a file in case of error
# $3 Log file for the running thread

######## Create the view

THREAD=`$BASENAME $3`
${DBISQL_DC} $DELTAVIEWSQL/$1.sql
if [[ $? -eq 0 ]]; then
        EchoDateText $3 $THREAD "View  $1 created "
        ${DBISQL_DBA} "grant select on dc.$1 to dcbo"
        EchoDateText $3 $THREAD "SELECT permission granted for dcbo user on view $1"
        ${DBISQL_DBA} "grant select on dc.$1 to dcpublic"
        EchoDateText $3 $THREAD "SELECT permission granted for dcpublic user on view $1"

else
        if [[ $2 -eq 1 ]]; then
                $ECHO "-r , $1" >> ${FAILEDVIEWSLOG}
                EchoDateText $3 $THREAD "Error while recreating the view $1"
        else
                EchoDateText $3 $THREAD "WARNING!!! Recreation of the view $1 failed.."
        fi
fi

}

drop_view()
{
# Arguments
# $1 Name of the Delta view to be dropped
# $2 Flag that enables writing to a file in case of error
# $3 Log file for the running thread

######## Check if the view is existing and drop the view

THREAD=`$BASENAME $3`
${DBISQL_DC} "if (object_id('dc.$1') is not null)
BEGIN
        drop view $1
END"
if [[ $? -eq 0 ]]; then
        EchoDateText $3 $THREAD "Dropped existing view $1"
        recreate_view $1 $2 $3
else
        if [[ $2 -eq 1 ]]; then
                $ECHO "-d , $1" >> ${FAILEDVIEWSLOG}
                EchoDateText $3 $THREAD "Error encountered while Dropping the view $1."
        else
                EchoDateText $3 $THREAD "WARNING!!! Dropping of the view $1 failed......."
        fi
fi
}

get_partition_table()
{
# Arguments
# $1 Delta_view name
# $2 view name
# $3 log file name for the thread

${DBISQL_DWHREP} "select TABLENAME,STARTTIME,ENDTIME from DWHPartition where TABLENAME like'$2%';OUTPUT TO $TMP/tmppart_$1.txt"

THREAD=`$BASENAME $3`
curr_date=`$DATE +"%F %H:%M:%S"`
partition_name=
while IFS= read var
do
        partition_name_tmp=`$ECHO "$var" | $CUT -d, -f1`
        partition_name=${partition_name_tmp//\'}
        start_date=`$ECHO "$var" | $CUT -d, -f2 | $SED 's/.000//g'`
        end_date=`$ECHO "$var" | $CUT -d, -f3 | $SED 's/.000//g'`
        if [[  $end_date > $curr_date ]] && [[ $start_date < $curr_date ]] ; then
                $ECHO "$partition_name "
                EchoDateText $3 $THREAD "$partition_name is the partition table for the Delta view $1"
                break
        elif [[ $start_date = $curr_date ]] || [[  $end_date = $curr_date ]] ; then
                $ECHO "$partition_name "
                EchoDateText $3 $THREAD "$partition_name is the partition table for the Delta view $1"
                break
        else
                continue
        fi
done < $TMP/tmppart_$1.txt


### Modifying the view definition
EchoDateText $3 $THREAD "Fetching the view definition for $1"
${DBISQL_DC} "select viewtext from SYSVIEWS where viewname like '$1'; OUTPUT TO $DELTAVIEWSQL/tmp_$1.sql HEXADECIMAL ASIS FORMAT TEXT QUOTE ''"
$ECHO "Grep for $partition_name"
x=$($GREP -c "$partition_name" $DELTAVIEWSQL/tmp_$1.sql)

if [[ $x -eq 0 ]]
then
   flag=1
else
   flag=0
fi

if [[ $flag -eq 1 ]]; then
        EchoDateText $3 $THREAD "Making appropriate changes in the view definition for $1"
        #$SED "s/\<$2\>/$partition_name/" $DELTAVIEWSQL/tmp_$1.sql > $DELTAVIEWSQL/$1.sql
        if $GREP "\<$2\>" "$DELTAVIEWSQL/tmp_$1.sql"; then
                $SED "s/\<${2}\>/$partition_name/" $DELTAVIEWSQL/tmp_$1.sql > $DELTAVIEWSQL/$1_partial.sql
        else
        $SED "s/"$2\_\[0-1][0-9]"/$partition_name/" $DELTAVIEWSQL/tmp_$1.sql > $DELTAVIEWSQL/$1_partial.sql
        fi

        ## Handling treat-as supported nodes ##
        changed=0
        #check if the query already has treat-as fix for handling DC_RELEASE
        check_existing_query=$($GREP '"c"."DC_RELEASE" ' $DELTAVIEWSQL/$1_partial.sql | $HEAD -1 | $GREP -ic NOT)
        if [[ $check_existing_query -ne 1 ]]; then
        countview=${1/_DELTA/_COUNT}
                ${DBISQL_ETLREP} "select (ACTION_CONTENTS_01 + ACTION_CONTENTS_02 + ACTION_CONTENTS_03) as column from META_TRANSFER_ACTIONS where TRANSFER_ACTION_NAME like'%$countview' and ENABLED_FLAG='Y';OUTPUT TO $DELTAVIEWSQL/temp_$countview.sql HEXADECIMAL ASIS FORMAT TEXT QUOTE ''"

                #check if treat-as support is provided, if yes, swap 'in' and 'not in' queries
                treat_as=$($GREP "c.DC_RELEASE " $DELTAVIEWSQL/temp_$countview.sql | $HEAD -1 | $GREP -ic NOT)
                if [[ $treat_as -eq 1 ]]; then
                        in='and "c"."DC_RELEASE" in'
                        not_in='where "c"."DC_RELEASE" not in'
                        new_not_in='and "c"."DC_RELEASE" not in'
                        new_in='where "c"."DC_RELEASE" in'
                        #modify viewtext with dc_release from META_TRANSFER_ACTIONS
                        new_dc_release=`$GREP "c.DC_RELEASE IN" $DELTAVIEWSQL/temp_$countview.sql | $SED 's/.*(\(.*\)).*/\1/'`
                        old_dc_release=`$GREP '"c"."DC_RELEASE" in' $DELTAVIEWSQL/$1_partial.sql | $SED 's/.*(\(.*\)).*/\1/'`

                        $SED -e "s/$in/$new_not_in/g" -e "s/$not_in/$new_in/g" -e "s/$old_dc_release/$new_dc_release/g" $DELTAVIEWSQL/$1_partial.sql > $DELTAVIEWSQL/$1_trtas.sql
                        changed=1
                        $AWK '{ printf "\n%s", $0 }BEGIN{printf "SET TEMPORARY OPTION QUOTED_IDENTIFIER = ON;"}END{ printf ";\n" }' $DELTAVIEWSQL/$1_trtas.sql > $DELTAVIEWSQL/$1.sql
                        $RM -rf $DELTAVIEWSQL/$1_trtas.sql
                fi
                $RM -rf $DELTAVIEWSQL/temp_$countview.sql
        fi
        if [[ $changed -eq 0 ]]; then
        $AWK '{ printf "\n%s", $0 }BEGIN{printf "SET TEMPORARY OPTION QUOTED_IDENTIFIER = ON;"}END{ printf ";\n" }' $DELTAVIEWSQL/$1_partial.sql > $DELTAVIEWSQL/$1.sql
        fi

        $RM -rf $DELTAVIEWSQL/$1_partial.sql

        EchoDateText $3 $THREAD "View definition at $DELTAVIEWSQL/$1.sql"
        return 1
else
        EchoDateText $3 $THREAD "View definition for $1 is correct"
        return 0
fi
}

retry()
{
## If failed view file exists,retry once
if [[ -e ${FAILEDVIEWSLOG} ]];then
        retry=0
        while IFS= read var
                do
                        operation=`$ECHO "$var" | $CUT -d, -f1`
                        view=`$ECHO "$var" | $CUT -d, -f2`
                        if [[ "$operation" -eq "-d" ]]; then
                                drop_view $view $retry $TMP/thread.log
                        elif [[ "$operation" -eq "-r" ]]; then
                                recreate_view $view  $retry $TMP/thread.log
                        fi
                done < ${FAILEDVIEWSLOG}
fi
}

init()
{

#if [ ! -d ${VIEWDEFSBCKUP} ]; then


#fi

if [ ! -d ${LOGPATH} ] ; then
  $MKDIR -p ${LOGPATH}
  $CHMOD 777 ${LOGPATH}
fi

if [ ! -d ${TMP} ] ; then
  $MKDIR -p ${TMP}
  $CHMOD 777 ${TMP}
else
  $RM -rf ${TMP}
  $MKDIR -p ${TMP}
  $CHMOD 777 ${TMP}
fi

if [ ! -d ${DELTAVIEWSQL} ] ; then
  $MKDIR -p ${DELTAVIEWSQL}
else
  $RM -rf ${DELTAVIEWSQL}
  $MKDIR -p ${DELTAVIEWSQL}
  $CHMOD 777 ${DELTAVIEWSQL}
fi
}

### The execution starts here ######
if [[ $# -eq 0 ]]; then


        ##Check if the flag file is present
        YESTERDAY=`TZ=GMT+24 $DATE +%Y%m%d`;

        if [[ -e ${INSTALLER_DIR}/flag_delta_$YESTERDAY ]]; then
                $RM ${INSTALLER_DIR}/flag_delta_*
        fi

        init
        $ECHO "Retrieving the names of all the Delta views.." >> ${LOGFILE}
        ${DBISQL_DC} "select viewname from SYSVIEWS WHERE viewname like '%[_]DELTA' order by viewname;OUTPUT TO $TMP/tmpnew.txt"

        #This variable is set to 1 to enable retrying the creation of failed views
        retryFailure=1

        lineCount=`$CAT $TMP/tmpnew.txt | $WC -l`
        num=`$EXPR $((lineCount/4))`
        lastThreadtoExe=`$EXPR $((lineCount%4))`

        num2=`$EXPR $((num*2))`
        num3=`$EXPR $((num*3))`
        num4=`$EXPR $((num*4))`

        $SED -n 1,${num}p $TMP/tmpnew.txt >> $TMP/tmp1.txt
        $SED -n `$EXPR $((num+1))`,${num2}p $TMP/tmpnew.txt >> $TMP/tmp2.txt
        $SED -n `$EXPR $((num2+1))`,${num3}p $TMP/tmpnew.txt >> $TMP/tmp3.txt
        $SED -n `$EXPR $((num3+1))`,${num4}p $TMP/tmpnew.txt >> $TMP/tmp4.txt
        $SED -n `$EXPR $((num4+1))`,`$EXPR $((num4+lastThreadtoExe))`p $TMP/tmpnew.txt >> $TMP/tmp5.txt

        runInParallel $TMP/tmp1.txt $TMP/thread1.log &
        runInParallel $TMP/tmp2.txt $TMP/thread2.log &
        runInParallel $TMP/tmp3.txt $TMP/thread3.log &
        runInParallel $TMP/tmp4.txt $TMP/thread4.log &
        runInParallel $TMP/tmp5.txt $TMP/thread5.log &

        #wait for all the threads to complete its execution
        wait

        #consolidate all the logs of the threads
        if [[ -f $TMP/thread5.log ]]; then
                $CAT $TMP/thread1.log $TMP/thread2.log $TMP/thread3.log $TMP/thread4.log $TMP/thread5.log >> ${LOGFILE}
        else
                $CAT $TMP/thread1.log $TMP/thread2.log $TMP/thread3.log $TMP/thread4.log  >> ${LOGFILE}
        fi

        #Check for any failure
        retry
elif [[ $# -eq 2 ]]; then
        #Flag is made 0 to disable retrying incase of failure
        flag=0
        ##Read the first argument passed to the script
        if [[ "$1" == "-d" ]]; then
                drop_view $2 $flag $TMP/thread.log
        elif [[ "$1" == "-r" ]]; then
                recreate_view $2 $flag $TMP/thread.log
        else
                usage
        fi
else
        usage
fi
if [[ -f $TMP/thread.log ]]; then
	$CAT $TMP/thread.log >> ${LOGFILE}
fi
ENDTIMESTAMP=`$DATE '+%y%m%d_%H%M%S'`
$ECHO "Execution ended at " $ENDTIMESTAMP >> ${LOGFILE}


###Create a flag_file on successful completion of the script
$TOUCH ${INSTALLER_DIR}/flag_delta_$TODAY


#### Remove all the Temporary directories created so far
$RM -rf ${TMP}

### Function: abort_script ###
#
#   This is called if the script is aborted thru an error
#   error signal sent by the kernel such as CTRL-C or if a serious
#   error is encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program (Not always used)
# Return Values:
#       none
abort_script()
{
if [ "$1" ]; then
    _err_msg_=$1
else
    _err_msg_="Script aborted.......\n"
fi
if [ "${LOGFILE}" ]; then
    $ECHO "\n$_err_msg_\n"|$TEE -a ${LOGFILE}
else
    $ECHO "\n$_err_msg_\n"
fi
}


